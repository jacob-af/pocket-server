type RecipeBook {
  id: ID!
  name: String!
  description: String!
  createdAt: Date
  createdById: String
  editedAt: Date
  createdBy: User
  editedBy: User
  isPublic: Boolean
  permission: Permission
  userBuild: [Build!]!
  publicBuild: [Build]
  allBuild: [Build!]!
}

type RecipeBookUser {
  recipeBook: RecipeBook!
  user: User!
  permission: Permission!
}

type RecipeBookShare {
  recipeBook: RecipeBookUser
  status: StatusMessage
}

type UserBookPermission {
  user: User!
  permission: String
}

type Query {
  findFolloweddUsersBookPermission(recipeBookId: String!): [UserBookPermission]
  publicBook(name: String): RecipeBook!
  publicBookList: [RecipeBook]!
  publicBooks(skip: Int, take: Int): [RecipeBook]!
  book(name: String): RecipeBook
  userBookList: [RecipeBook]!
  userBooks(skip: Int, take: Int): [RecipeBook]!
  allBookList: [RecipeBook]!
}

type Mutation {
  createRecipeBook(
    name: String!
    description: String
    isPublic: Boolean
  ): RecipeBook!
  updateRecipeBook(
    id: String!
    name: String!
    permission: Permission!
    description: String
  ): RecipeBook!
  removeRecipeBook(id: String!, permission: Permission!): StatusMessage!

  addBuildToRecipeBook(
    recipeBookId: String!
    buildId: String!
    buildPermission: Permission!
    bookPermission: Permission!
  ): Build!

  removeBuildFromRecipeBook(
    recipeBookId: String!
    buildId: String!
    bookPermission: Permission!
  ): StatusMessage!

  changeRecipeBookPermission(
    userId: String!
    recipeBookId: String!
    userPermission: Permission
    desiredPermission: Permission
  ): RecipeBookShare!

  removeRecipeBookPermission(
    userId: String!
    recipeBookId: String!
    permission: Permission
  ): StatusMessage!
}
